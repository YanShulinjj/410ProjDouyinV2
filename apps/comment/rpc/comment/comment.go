// Code generated by goctl. DO NOT EDIT!
// Source: comment.proto

package comment

import (
	"context"

	"410proj/apps/comment/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentReq     = rpc.AddCommentReq
	AddCommentResp    = rpc.AddCommentResp
	CommentItem       = rpc.CommentItem
	CommentItemReq    = rpc.CommentItemReq
	CommentNumReq     = rpc.CommentNumReq
	CommentNumResp    = rpc.CommentNumResp
	CommentPageReq    = rpc.CommentPageReq
	CommentPageResp   = rpc.CommentPageResp
	CommentReq        = rpc.CommentReq
	CommentResp       = rpc.CommentResp
	DropCommentReq    = rpc.DropCommentReq
	DropCommentResp   = rpc.DropCommentResp
	UpdateCommentReq  = rpc.UpdateCommentReq
	UpdateCommentResp = rpc.UpdateCommentResp

	Comment interface {
		Get(ctx context.Context, in *CommentItemReq, opts ...grpc.CallOption) (*CommentItem, error)
		GetCommentNum(ctx context.Context, in *CommentNumReq, opts ...grpc.CallOption) (*CommentNumResp, error)
		Gets(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error)
		GetByPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageResp, error)
		Add(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
		Update(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
		Drop(ctx context.Context, in *DropCommentReq, opts ...grpc.CallOption) (*DropCommentResp, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) Get(ctx context.Context, in *CommentItemReq, opts ...grpc.CallOption) (*CommentItem, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultComment) GetCommentNum(ctx context.Context, in *CommentNumReq, opts ...grpc.CallOption) (*CommentNumResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.GetCommentNum(ctx, in, opts...)
}

func (m *defaultComment) Gets(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.Gets(ctx, in, opts...)
}

func (m *defaultComment) GetByPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.GetByPage(ctx, in, opts...)
}

func (m *defaultComment) Add(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultComment) Update(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultComment) Drop(ctx context.Context, in *DropCommentReq, opts ...grpc.CallOption) (*DropCommentResp, error) {
	client := rpc.NewCommentClient(m.cli.Conn())
	return client.Drop(ctx, in, opts...)
}
