// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: comment.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentClient interface {
	Get(ctx context.Context, in *CommentItemReq, opts ...grpc.CallOption) (*CommentItem, error)
	GetCommentNum(ctx context.Context, in *CommentNumReq, opts ...grpc.CallOption) (*CommentNumResp, error)
	Gets(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error)
	GetByPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageResp, error)
	Add(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	Update(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
	Drop(ctx context.Context, in *DropCommentReq, opts ...grpc.CallOption) (*DropCommentResp, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) Get(ctx context.Context, in *CommentItemReq, opts ...grpc.CallOption) (*CommentItem, error) {
	out := new(CommentItem)
	err := c.cc.Invoke(ctx, "/comment.Comment/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentNum(ctx context.Context, in *CommentNumReq, opts ...grpc.CallOption) (*CommentNumResp, error) {
	out := new(CommentNumResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/GetCommentNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) Gets(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error) {
	out := new(CommentResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetByPage(ctx context.Context, in *CommentPageReq, opts ...grpc.CallOption) (*CommentPageResp, error) {
	out := new(CommentPageResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/GetByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) Add(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) Update(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	out := new(UpdateCommentResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) Drop(ctx context.Context, in *DropCommentReq, opts ...grpc.CallOption) (*DropCommentResp, error) {
	out := new(DropCommentResp)
	err := c.cc.Invoke(ctx, "/comment.Comment/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
// All implementations must embed UnimplementedCommentServer
// for forward compatibility
type CommentServer interface {
	Get(context.Context, *CommentItemReq) (*CommentItem, error)
	GetCommentNum(context.Context, *CommentNumReq) (*CommentNumResp, error)
	Gets(context.Context, *CommentReq) (*CommentResp, error)
	GetByPage(context.Context, *CommentPageReq) (*CommentPageResp, error)
	Add(context.Context, *AddCommentReq) (*AddCommentResp, error)
	Update(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error)
	Drop(context.Context, *DropCommentReq) (*DropCommentResp, error)
	mustEmbedUnimplementedCommentServer()
}

// UnimplementedCommentServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServer struct {
}

func (UnimplementedCommentServer) Get(context.Context, *CommentItemReq) (*CommentItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommentServer) GetCommentNum(context.Context, *CommentNumReq) (*CommentNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentNum not implemented")
}
func (UnimplementedCommentServer) Gets(context.Context, *CommentReq) (*CommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (UnimplementedCommentServer) GetByPage(context.Context, *CommentPageReq) (*CommentPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPage not implemented")
}
func (UnimplementedCommentServer) Add(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCommentServer) Update(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommentServer) Drop(context.Context, *DropCommentReq) (*DropCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedCommentServer) mustEmbedUnimplementedCommentServer() {}

// UnsafeCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServer will
// result in compilation errors.
type UnsafeCommentServer interface {
	mustEmbedUnimplementedCommentServer()
}

func RegisterCommentServer(s grpc.ServiceRegistrar, srv CommentServer) {
	s.RegisterService(&Comment_ServiceDesc, srv)
}

func _Comment_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).Get(ctx, req.(*CommentItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/GetCommentNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentNum(ctx, req.(*CommentNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).Gets(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/GetByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetByPage(ctx, req.(*CommentPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).Add(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).Update(ctx, req.(*UpdateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comment/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).Drop(ctx, req.(*DropCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Comment_ServiceDesc is the grpc.ServiceDesc for Comment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Comment_Get_Handler,
		},
		{
			MethodName: "GetCommentNum",
			Handler:    _Comment_GetCommentNum_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Comment_Gets_Handler,
		},
		{
			MethodName: "GetByPage",
			Handler:    _Comment_GetByPage_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Comment_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Comment_Update_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _Comment_Drop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
