// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLikeMapFieldNames          = builder.RawFieldNames(&UserLikeMap{})
	userLikeMapRows                = strings.Join(userLikeMapFieldNames, ",")
	userLikeMapRowsExpectAutoSet   = strings.Join(stringx.Remove(userLikeMapFieldNames, "`like_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userLikeMapRowsWithPlaceHolder = strings.Join(stringx.Remove(userLikeMapFieldNames, "`like_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserLikeMapLikeIdPrefix        = "cache:userLikeMap:likeId:"
	cacheUserLikeMapUserIdVideoIdPrefix = "cache:userLikeMap:userId:videoId:"
	cacheUserLikeMapUserIdVideosPrefix  = "cache:userLikeMap:userId:videoIds:"
)

type (
	userLikeMapModel interface {
		Insert(ctx context.Context, data *UserLikeMap) (sql.Result, error)
		FindOne(ctx context.Context, likeId int64) (*UserLikeMap, error)
		FindMany(ctx context.Context, userId int64) ([]*UserLikeMap, error)
		FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*UserLikeMap, error)
		Update(ctx context.Context, data *UserLikeMap) error
		Delete(ctx context.Context, likeId int64) error
	}

	defaultUserLikeMapModel struct {
		sqlc.CachedConn
		table string
	}

	UserLikeMap struct {
		LikeId     int64     `db:"like_id"`     // 关系ID
		UserId     int64     `db:"user_id"`     // 用户id
		VideoId    int64     `db:"video_id"`    // 视频id
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newUserLikeMapModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserLikeMapModel {
	return &defaultUserLikeMapModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_like_map`",
	}
}

func (m *defaultUserLikeMapModel) Delete(ctx context.Context, likeId int64) error {
	data, err := m.FindOne(ctx, likeId)
	if err != nil {
		return err
	}

	userLikeMapLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeMapLikeIdPrefix, likeId)
	userLikeMapUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheUserLikeMapUserIdVideoIdPrefix, data.UserId, data.VideoId)
	userLikeUseridVideosKey := fmt.Sprintf("%s%v", cacheUserLikeMapUserIdVideosPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `like_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, likeId)
	}, userLikeMapLikeIdKey, userLikeMapUserIdVideoIdKey, userLikeUseridVideosKey)
	return err
}

func (m *defaultUserLikeMapModel) FindOne(ctx context.Context, likeId int64) (*UserLikeMap, error) {
	userLikeMapLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeMapLikeIdPrefix, likeId)
	var resp UserLikeMap
	err := m.QueryRowCtx(ctx, &resp, userLikeMapLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `like_id` = ? limit 1", userLikeMapRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, likeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeMapModel) FindMany(ctx context.Context, userId int64) ([]*UserLikeMap, error) {
	userLikeUseridVideosKey := fmt.Sprintf("%s%v", cacheUserLikeMapUserIdVideosPrefix, userId)
	var resp []*UserLikeMap
	err := m.QueryRowCtx(ctx, &resp, userLikeUseridVideosKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ?", userLikeMapRows, m.table)
		return conn.QueryRowsCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeMapModel) FindOneByUserIdVideoId(ctx context.Context, userId int64, videoId int64) (*UserLikeMap, error) {
	userLikeMapUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheUserLikeMapUserIdVideoIdPrefix, userId, videoId)
	var resp UserLikeMap
	err := m.QueryRowIndexCtx(ctx, &resp, userLikeMapUserIdVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `video_id` = ? limit 1", userLikeMapRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, videoId); err != nil {
			return nil, err
		}
		return resp.LikeId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLikeMapModel) Insert(ctx context.Context, data *UserLikeMap) (sql.Result, error) {
	userLikeMapLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeMapLikeIdPrefix, data.LikeId)
	userLikeMapUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheUserLikeMapUserIdVideoIdPrefix, data.UserId, data.VideoId)
	userLikeUseridVideosKey := fmt.Sprintf("%s%v", cacheUserLikeMapUserIdVideosPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userLikeMapRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId)
	}, userLikeMapLikeIdKey, userLikeMapUserIdVideoIdKey, userLikeUseridVideosKey)
	return ret, err
}

func (m *defaultUserLikeMapModel) Update(ctx context.Context, newData *UserLikeMap) error {
	data, err := m.FindOne(ctx, newData.LikeId)
	if err != nil {
		return err
	}

	userLikeMapLikeIdKey := fmt.Sprintf("%s%v", cacheUserLikeMapLikeIdPrefix, data.LikeId)
	userLikeMapUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheUserLikeMapUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `like_id` = ?", m.table, userLikeMapRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.VideoId, newData.LikeId)
	}, userLikeMapLikeIdKey, userLikeMapUserIdVideoIdKey)
	return err
}

func (m *defaultUserLikeMapModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserLikeMapLikeIdPrefix, primary)
}

func (m *defaultUserLikeMapModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `like_id` = ? limit 1", userLikeMapRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLikeMapModel) tableName() string {
	return m.table
}
