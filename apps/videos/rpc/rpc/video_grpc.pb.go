// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: video.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	Get(ctx context.Context, in *VideoItemReq, opts ...grpc.CallOption) (*VideoItem, error)
	Gets(ctx context.Context, in *VideoReq, opts ...grpc.CallOption) (*VideoResp, error)
	PublishList(ctx context.Context, in *VideoPublishReq, opts ...grpc.CallOption) (*VideoPublishResp, error)
	Feeds(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error)
	Add(ctx context.Context, in *AddVideoReq, opts ...grpc.CallOption) (*AddVideoResp, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) Get(ctx context.Context, in *VideoItemReq, opts ...grpc.CallOption) (*VideoItem, error) {
	out := new(VideoItem)
	err := c.cc.Invoke(ctx, "/video.Video/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) Gets(ctx context.Context, in *VideoReq, opts ...grpc.CallOption) (*VideoResp, error) {
	out := new(VideoResp)
	err := c.cc.Invoke(ctx, "/video.Video/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) PublishList(ctx context.Context, in *VideoPublishReq, opts ...grpc.CallOption) (*VideoPublishResp, error) {
	out := new(VideoPublishResp)
	err := c.cc.Invoke(ctx, "/video.Video/PublishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) Feeds(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error) {
	out := new(VideoFeedResp)
	err := c.cc.Invoke(ctx, "/video.Video/Feeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) Add(ctx context.Context, in *AddVideoReq, opts ...grpc.CallOption) (*AddVideoResp, error) {
	out := new(AddVideoResp)
	err := c.cc.Invoke(ctx, "/video.Video/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	Get(context.Context, *VideoItemReq) (*VideoItem, error)
	Gets(context.Context, *VideoReq) (*VideoResp, error)
	PublishList(context.Context, *VideoPublishReq) (*VideoPublishResp, error)
	Feeds(context.Context, *VideoFeedReq) (*VideoFeedResp, error)
	Add(context.Context, *AddVideoReq) (*AddVideoResp, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) Get(context.Context, *VideoItemReq) (*VideoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVideoServer) Gets(context.Context, *VideoReq) (*VideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (UnimplementedVideoServer) PublishList(context.Context, *VideoPublishReq) (*VideoPublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedVideoServer) Feeds(context.Context, *VideoFeedReq) (*VideoFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feeds not implemented")
}
func (UnimplementedVideoServer) Add(context.Context, *AddVideoReq) (*AddVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.Video/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Get(ctx, req.(*VideoItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.Video/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Gets(ctx, req.(*VideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.Video/PublishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).PublishList(ctx, req.(*VideoPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_Feeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Feeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.Video/Feeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Feeds(ctx, req.(*VideoFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.Video/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Add(ctx, req.(*AddVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Video_Get_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Video_Gets_Handler,
		},
		{
			MethodName: "PublishList",
			Handler:    _Video_PublishList_Handler,
		},
		{
			MethodName: "Feeds",
			Handler:    _Video_Feeds_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Video_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
