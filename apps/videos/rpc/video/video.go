// Code generated by goctl. DO NOT EDIT!
// Source: video.proto

package video

import (
	"context"

	"410proj/apps/videos/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddVideoReq      = rpc.AddVideoReq
	AddVideoResp     = rpc.AddVideoResp
	VideoFeedReq     = rpc.VideoFeedReq
	VideoFeedResp    = rpc.VideoFeedResp
	VideoItem        = rpc.VideoItem
	VideoItemReq     = rpc.VideoItemReq
	VideoPublishReq  = rpc.VideoPublishReq
	VideoPublishResp = rpc.VideoPublishResp
	VideoReq         = rpc.VideoReq
	VideoResp        = rpc.VideoResp

	Video interface {
		Get(ctx context.Context, in *VideoItemReq, opts ...grpc.CallOption) (*VideoItem, error)
		Gets(ctx context.Context, in *VideoReq, opts ...grpc.CallOption) (*VideoResp, error)
		PublishList(ctx context.Context, in *VideoPublishReq, opts ...grpc.CallOption) (*VideoPublishResp, error)
		Feeds(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error)
		Add(ctx context.Context, in *AddVideoReq, opts ...grpc.CallOption) (*AddVideoResp, error)
	}

	defaultVideo struct {
		cli zrpc.Client
	}
)

func NewVideo(cli zrpc.Client) Video {
	return &defaultVideo{
		cli: cli,
	}
}

func (m *defaultVideo) Get(ctx context.Context, in *VideoItemReq, opts ...grpc.CallOption) (*VideoItem, error) {
	client := rpc.NewVideoClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultVideo) Gets(ctx context.Context, in *VideoReq, opts ...grpc.CallOption) (*VideoResp, error) {
	client := rpc.NewVideoClient(m.cli.Conn())
	return client.Gets(ctx, in, opts...)
}

func (m *defaultVideo) PublishList(ctx context.Context, in *VideoPublishReq, opts ...grpc.CallOption) (*VideoPublishResp, error) {
	client := rpc.NewVideoClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

func (m *defaultVideo) Feeds(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error) {
	client := rpc.NewVideoClient(m.cli.Conn())
	return client.Feeds(ctx, in, opts...)
}

func (m *defaultVideo) Add(ctx context.Context, in *AddVideoReq, opts ...grpc.CallOption) (*AddVideoResp, error) {
	client := rpc.NewVideoClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}
