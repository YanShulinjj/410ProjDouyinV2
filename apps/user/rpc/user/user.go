// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"410proj/apps/user/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserReq     = rpc.AddUserReq
	AddUserResp    = rpc.AddUserResp
	UpdateUserReq  = rpc.UpdateUserReq
	UpdateUserResp = rpc.UpdateUserResp
	UserItem       = rpc.UserItem
	UserItemReq    = rpc.UserItemReq
	UserLoginReq   = rpc.UserLoginReq
	UserLoginResp  = rpc.UserLoginResp
	UserReq        = rpc.UserReq
	UserResp       = rpc.UserResp

	User interface {
		Get(ctx context.Context, in *UserItemReq, opts ...grpc.CallOption) (*UserItem, error)
		Gets(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
		Register(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
		Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
		Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Get(ctx context.Context, in *UserItemReq, opts ...grpc.CallOption) (*UserItem, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultUser) Gets(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Gets(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}
