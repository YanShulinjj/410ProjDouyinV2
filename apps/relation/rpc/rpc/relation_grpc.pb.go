// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: relation.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	GetFollowList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowList, error)
	GetFollowerList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowerList, error)
	IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error)
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
	FollowCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error)
	FollowerCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error)
	CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*CancelFollowResp, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) GetFollowList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowList, error) {
	out := new(FollowList)
	err := c.cc.Invoke(ctx, "/relation.Relation/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetFollowerList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowerList, error) {
	out := new(FollowerList)
	err := c.cc.Invoke(ctx, "/relation.Relation/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error) {
	out := new(IsFollowResp)
	err := c.cc.Invoke(ctx, "/relation.Relation/IsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	out := new(FollowResp)
	err := c.cc.Invoke(ctx, "/relation.Relation/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FollowCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error) {
	out := new(UserCount)
	err := c.cc.Invoke(ctx, "/relation.Relation/FollowCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FollowerCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error) {
	out := new(UserCount)
	err := c.cc.Invoke(ctx, "/relation.Relation/FollowerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*CancelFollowResp, error) {
	out := new(CancelFollowResp)
	err := c.cc.Invoke(ctx, "/relation.Relation/CancelFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	GetFollowList(context.Context, *User) (*FollowList, error)
	GetFollowerList(context.Context, *User) (*FollowerList, error)
	IsFollow(context.Context, *IsFollowReq) (*IsFollowResp, error)
	Follow(context.Context, *FollowReq) (*FollowResp, error)
	FollowCount(context.Context, *User) (*UserCount, error)
	FollowerCount(context.Context, *User) (*UserCount, error)
	CancelFollow(context.Context, *CancelFollowReq) (*CancelFollowResp, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) GetFollowList(context.Context, *User) (*FollowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedRelationServer) GetFollowerList(context.Context, *User) (*FollowerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedRelationServer) IsFollow(context.Context, *IsFollowReq) (*IsFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollow not implemented")
}
func (UnimplementedRelationServer) Follow(context.Context, *FollowReq) (*FollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedRelationServer) FollowCount(context.Context, *User) (*UserCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCount not implemented")
}
func (UnimplementedRelationServer) FollowerCount(context.Context, *User) (*UserCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerCount not implemented")
}
func (UnimplementedRelationServer) CancelFollow(context.Context, *CancelFollowReq) (*CancelFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFollow not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowList(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowerList(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_IsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).IsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/IsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).IsFollow(ctx, req.(*IsFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FollowCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FollowCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/FollowCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FollowCount(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FollowerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FollowerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/FollowerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FollowerCount(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CancelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CancelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.Relation/CancelFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CancelFollow(ctx, req.(*CancelFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowList",
			Handler:    _Relation_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _Relation_GetFollowerList_Handler,
		},
		{
			MethodName: "IsFollow",
			Handler:    _Relation_IsFollow_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Relation_Follow_Handler,
		},
		{
			MethodName: "FollowCount",
			Handler:    _Relation_FollowCount_Handler,
		},
		{
			MethodName: "FollowerCount",
			Handler:    _Relation_FollowerCount_Handler,
		},
		{
			MethodName: "CancelFollow",
			Handler:    _Relation_CancelFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
