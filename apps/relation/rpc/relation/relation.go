// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package relation

import (
	"context"

	"410proj/apps/relation/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelFollowReq  = rpc.CancelFollowReq
	CancelFollowResp = rpc.CancelFollowResp
	FollowList       = rpc.FollowList
	FollowReq        = rpc.FollowReq
	FollowResp       = rpc.FollowResp
	FollowerList     = rpc.FollowerList
	IsFollowReq      = rpc.IsFollowReq
	IsFollowResp     = rpc.IsFollowResp
	User             = rpc.User
	UserCount        = rpc.UserCount
	Users            = rpc.Users

	Relation interface {
		GetFollowList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowList, error)
		GetFollowerList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowerList, error)
		IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error)
		Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
		FollowCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error)
		FollowerCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error)
		CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*CancelFollowResp, error)
	}

	defaultRelation struct {
		cli zrpc.Client
	}
)

func NewRelation(cli zrpc.Client) Relation {
	return &defaultRelation{
		cli: cli,
	}
}

func (m *defaultRelation) GetFollowList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowList, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

func (m *defaultRelation) GetFollowerList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FollowerList, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultRelation) IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*IsFollowResp, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.IsFollow(ctx, in, opts...)
}

func (m *defaultRelation) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.Follow(ctx, in, opts...)
}

func (m *defaultRelation) FollowCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.FollowCount(ctx, in, opts...)
}

func (m *defaultRelation) FollowerCount(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserCount, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.FollowerCount(ctx, in, opts...)
}

func (m *defaultRelation) CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*CancelFollowResp, error) {
	client := rpc.NewRelationClient(m.cli.Conn())
	return client.CancelFollow(ctx, in, opts...)
}
