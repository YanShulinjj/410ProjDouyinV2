// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package server

import (
	"context"

	"410proj/apps/relation/rpc/internal/logic"
	"410proj/apps/relation/rpc/internal/svc"
	"410proj/apps/relation/rpc/rpc"
)

type RelationServer struct {
	svcCtx *svc.ServiceContext
	rpc.UnimplementedRelationServer
}

func NewRelationServer(svcCtx *svc.ServiceContext) *RelationServer {
	return &RelationServer{
		svcCtx: svcCtx,
	}
}

func (s *RelationServer) GetFollowList(ctx context.Context, in *rpc.User) (*rpc.FollowList, error) {
	l := logic.NewGetFollowListLogic(ctx, s.svcCtx)
	return l.GetFollowList(in)
}

func (s *RelationServer) GetFollowerList(ctx context.Context, in *rpc.User) (*rpc.FollowerList, error) {
	l := logic.NewGetFollowerListLogic(ctx, s.svcCtx)
	return l.GetFollowerList(in)
}

func (s *RelationServer) IsFollow(ctx context.Context, in *rpc.IsFollowReq) (*rpc.IsFollowResp, error) {
	l := logic.NewIsFollowLogic(ctx, s.svcCtx)
	return l.IsFollow(in)
}

func (s *RelationServer) Follow(ctx context.Context, in *rpc.FollowReq) (*rpc.FollowResp, error) {
	l := logic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

func (s *RelationServer) FollowCount(ctx context.Context, in *rpc.User) (*rpc.UserCount, error) {
	l := logic.NewFollowCountLogic(ctx, s.svcCtx)
	return l.FollowCount(in)
}

func (s *RelationServer) FollowerCount(ctx context.Context, in *rpc.User) (*rpc.UserCount, error) {
	l := logic.NewFollowerCountLogic(ctx, s.svcCtx)
	return l.FollowerCount(in)
}

func (s *RelationServer) CancelFollow(ctx context.Context, in *rpc.CancelFollowReq) (*rpc.CancelFollowResp, error) {
	l := logic.NewCancelFollowLogic(ctx, s.svcCtx)
	return l.CancelFollow(in)
}
